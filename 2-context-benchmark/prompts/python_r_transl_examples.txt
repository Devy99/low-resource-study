This is an example of Python function:
def dot_product(vector_one, vector_two):
    """
    Calculates the dot product of two vectors
    """
    total = 0

    for i in range(len(vector_one)):
        total += vector_one[i] * vector_two[i]

    return total
This is the equivalent in R:
#     Calculates the dot product of two vectors
dot_product <- function(vector_one, vector_two) {
        # initialize total sum
    total <- 0
    # loop through each position in vectors
    for (i in 1:length(vector_one)) {
            # add to total sum
        total <- total + vector_one[i] * vector_two[i]
    }
    # return total sum
    return(total)
}

This is another example of Python function:
def convert_sv_types(field_dict):
    """
    SignalVine has it's own types that we'll map over to Python primatives.
    """

    new_dict = {}
    for k, v in field_dict.items():
        print(k, v)

        if "Maybe" in v:
            required = False
        else:
            required = True

        if "Boolean" in v:
            new_type = "bool"
        elif "Numeric" in v:
            new_type = "int"
        elif "Float" in v:
            new_type = "float"
        else:
            # This will sweep in Date too for now. TBD
            new_type = "str"

        new_dict[k] = {"type": new_type, "required": required}

    return new_dict
This is the equivalent in R:
#     SignalVine has it's own types that we'll map over to R primatives.
convert_sv_types <- function(field_dict) {
      new_dict <- list()
  for (key in names(field_dict)) {
        value <- field_dict[key]
    new_dict[[key]] <- list()
    required <- if (grepl("Maybe", value)) {
          FALSE
    } else {
          TRUE
    }
    type <- if (grepl("Boolean", value)) {
          "bool"
    } else if (grepl("Numeric", value)) {
          "int"
    } else if (grepl("Float", value)) {
          "float"
    } else if (grepl("Date", value)) {
          "str"
    } else {
          "str"
    }
    new_dict[[key]][["type"]] <- type
    new_dict[[key]][["required"]] <- required
  }
  new_dict
}

