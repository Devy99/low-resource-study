This is an example of Python function:
def trim(text, max_length):
    """Trims text to be at most `max_length`, without splitting apart words."""
    if len(text) <= max_length:
        return text

    text = text[:max_length + 1]

    # Trim until the last two characters are the boundary between an
    # alphanumeric character, and a non-alphanumeric character.
    while len(text) > 1 and (text[-1].isalnum() == text[-2].isalnum()):
        text = text[:-1]

    return text[:-1]
This is the equivalent in Racket:
;; Trims text to be at most `max_length`, without splitting apart words.
(define (trim text max_length)
 (if (<= (string-length text) max_length)
     text
     (let ([last-char (string-ref text (- (string-length text) 1))])
       (if (or (and (char-alphabetic? last-char)
                    (char-alphabetic? (string-ref text (- (string-length text) 2))))
               (not (char-alphabetic? last-char)))
           (substring text 0 max_length)
           (let ([first-char (string-ref text 0)])
             (if (and (char-alphabetic? first-char)
                      (char-alphabetic? (string-ref text 1)))
                 (trim (substring text 1) max_length)
                 (trim (substring text 2) max_length)))))))

This is another example of Python function:
def deduplicate_non_disjoint_tuple_spans(list_tuple_span): 
    """ auxiliary function for find_all_with_dict_regex
    given the input list of tuple spans, when there are two spans that span on one another, 
    eliminate the smallest from the list
    """
    list_tuple_span = sorted(list_tuple_span, key=lambda x: x[0][1], reverse = True)
    list_tuple_span = sorted(list_tuple_span, key=lambda x: x[0][0])
    to_drop = []
    for index, item in enumerate(list_tuple_span[:-1]):
        if item[0][1]> list_tuple_span[index+1][0][0]: 
            to_drop.append(index + 1)
    return [x for ind, x in enumerate(list_tuple_span) if ind not in to_drop]
This is the equivalent in Racket:
;;  auxiliary function for find_all_with_dict_regex
;; given the input list of tuple spans, when there are two spans that span on one another, 
;; eliminate the smallest from the list
(define (deduplicate_non_disjoint_tuple_spans list_tuple_span)
    (if (> (length list_tuple_span) 1)
      (if (<= (car (car list_tuple_span)) 
            (cadr (car list_tuple_span)))
          (deduplicate_non_disjoint_tuple_spans (cdr list_tuple_span))
          (cons (car list_tuple_span) 
                (deduplicate_non_disjoint_tuple_spans (cdr list_tuple_span))))
      list_tuple_span))

